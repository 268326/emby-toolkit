name: Docker Image CI & CD for Emby Actor Processor

# 触发条件
on:
  push:
    branches:
      - main  # 当 main 分支有推送时触发 (用于构建 :latest 镜像)
    tags:
      - 'v*.*.*' # 当 vX.Y.Z 格式的标签被推送时触发 (用于构建版本化镜像)
  # (可选) 手动触发
  workflow_dispatch:

jobs:
  build-and-push:
    runs-on: ubuntu-latest # 使用最新的Ubuntu运行器

    permissions: 
      contents: read
      packages: write 

    steps:
      # 步骤1: 检出代码
      - name: Checkout repository
        uses: actions/checkout@v4

      # 步骤2: 设置 QEMU (可选, 用于多平台构建)
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      # 步骤3: 设置 Docker Buildx
      - name: Set up Docker Buildx
        id: buildx # 给这个步骤一个id，方便后续引用其输出（如果需要）
        uses: docker/setup-buildx-action@v3

      # 步骤4: 登录到 Docker Hub
      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      # 步骤5: (可选) 登录到 GitHub Container Registry (GHCR)
      # - name: Log in to GitHub Container Registry
      #   uses: docker/login-action@v3
      #   with:
      #     registry: ghcr.io
      #     username: ${{ github.actor }}
      #     password: ${{ secrets.GITHUB_TOKEN }}

      # 步骤6: 提取 Docker 元数据 (镜像名, 标签)
      - name: Extract Docker metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: |
            ${{ secrets.DOCKERHUB_USERNAME }}/emby-actor-processor 
            # ghcr.io/${{ github.repository_owner }}/emby-actor-processor
          tags: |
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=semver,pattern={{major}}
            type=edge,branch=main 
            type=raw,value=latest,enable={{is_default_branch}}

      # --- 新增的调试步骤 ---
      - name: Display Dockerfile content and hex dump
        run: |
          echo "--- Dockerfile Content (cat ./Dockerfile) ---"
          cat ./Dockerfile
          echo "--- End of Dockerfile Content (cat) ---"
          echo ""
          echo "--- Dockerfile Line Endings (file command) ---"
          file ./Dockerfile
          echo "--- End of Dockerfile Line Endings (file command) ---"
          echo ""
          echo "--- Dockerfile Hexdump (first 100 bytes using xxd) ---"
          # ubuntu-latest runner 通常包含 xxd (属于 vim-common 或类似包)
          # 如果没有，可以先安装: sudo apt-get update && sudo apt-get install -y xxd
          head -c 100 ./Dockerfile | xxd
          echo "--- End of Dockerfile Hexdump ---"
          echo ""
          echo "--- Docker Buildx Version ---"
          docker buildx version
          echo "--- Docker Version ---"
          docker version
      # --- 调试步骤结束 ---

      # 步骤7: 构建并推送 Docker 镜像
      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: . 
          file: ./Dockerfile 
          push: true 
          tags: ${{ steps.meta.outputs.tags }} 
          labels: ${{ steps.meta.outputs.labels }} 
          # platforms: linux/amd64,linux/arm64 # (可选)
          cache-from: type=gha 
<<<<<<< HEAD
          cache-to: type=gha,mode=max
=======
          cache-to: type=gha,mode=max
>>>>>>> f12caf6fdf5f0a6557c26c1cb9a906b33b68cf46
